@startuml Class_diagram

class Camera{
    sync(self)
    color_def(self)
    check_syched(self)
    imget(self)
    to_hsv(self)
    build_masks(self)
    bin_vis(self, color, waitkey)
    get_color_location(self, color: str)
    get_middle_location(self)
    show(self, wait):
    get_vector(self, color1: str, color2: str)
    get_angle(self)
    dynamic_calibration(self, color)
    static_calibration(self, color)
    fix_location(self)
    save_settings(self)
    configure(self)
} 

class Trackbar{
    get_param(self, param: str)
    get_H(self)
    get_S(self)
    get_V(self)
    get_lower(self)
    get_upper(self)
}

class Move{
    setup(self)
    get_params(self)
    right(self)
    test_speed(self, color, duration=1000)
    speed_define(self, duration=700)
    rotattion_define(self, duration=200)
    move_define(self)
    turn_define(self)
    commander(self)
    reached(self, acc=100)
    calibration(self)
}

class Mosquitto{
  topic
  port
  host
  buffer
  pub(self, message)
  get_messsage(self)
}

class Telegram_bot{
  make_an_order()
  send_datas()
}


class MainEngine{
  void forward(int time_ms)
  void left(int time_ms)
  void right(int time_ms)
  void stop(int time_ms)
}


class Motor{
    void forward();
    void backward();
    void stop();
}

class ControlSystem{
  bool running;
  string addres;
  unsigned int port;
  string topic;
  FooEngine* Engine;
  FooCmdReceiver Receiver;
  list<Cmd> parseMessage(string message);
  void run();
  ControlSystem(...);
  ~ControlSystem();
  bool isrunnig();
}

class AEngine{
  void formward(int time_ms)
  void right(int time_ms)
  void left(int time_ms)
  void stop()
}

class ACmd_Recevier{
  string receive()
}

class FooEngine{
  ' Будет выводить на экран имя метода и задерживать поток на time_ms
  void formward(int time_ms)
  void right(int time_ms)
  void left(int time_ms)
  void stop()
}

class FooCmdReceiver{
  'при вызове метода, receive будет получать пользователя команду с экрана и возвращать ее в виде строки
  string receive()
}

struct Cmd{
  string name
  int args
}

class Mqtt{
  struct mosquitto* mosq;
  std::string topic;
  int rc;
  std::string buffer;
  std::string host;
  unsigned int port;
  static void on_connect(...);
  static void on_message(...);
  static void on_disconnect(...);
  void connect();
  std::string get_message()
  void send_message(std::string message)
}


MainEngine <|-- FooEngine
MainEngine -* ControlSystem

FooEngine <|-- AEngine
FooCmdReceiver <|--  ACmd_Recevier
ControlSystem *-- FooCmdReceiver
ControlSystem *-- FooEngine
Cmd -> ControlSystem 
Mosquitto -* Move
Move *-- Camera
Trackbar -* Camera
MainEngine *-- Motor
FooCmdReceiver <- Mqtt
Move <- Telegram_bot
Mqtt <- Mosquitto
@enduml